import numpy as np
from keras.models import Sequential
from keras.layers import LSTM
from keras.layers import Dense
from sklearn.preprocessing import MinMaxScaler
import yfinance as yf

ticker = yf.Ticker('BTC-USD')
btc = ticker.history(period="max")
btc.head()

timesteps = btc.index.to_numpy()
prices = btc["Close"].to_numpy()

timesteps = np.reshape(timesteps, (len(timesteps), 1))
prices = np.reshape(prices, (len(prices), 1))
timesteps[:10],prices[:10]

def create_dataset(dataset, look_back=1):
    dataX, dataY = [], []
    for i in range(len(dataset)-look_back-1):
        a = dataset[i:(i+look_back), 0]
        dataX.append(a)
        dataY.append(dataset[i + look_back, 0])
    return np.array(dataX), np.array(dataY)

# normalize the dataset
scaler = MinMaxScaler(feature_range=(0, 1))

prices = scaler.fit_transform(prices)

# split into train and test sets
train_size = int(len(prices) * 0.67)
test_size = len(prices) - train_size
train, test = prices[0:train_size,:], prices[train_size:len(prices),:]

# reshape into X=t and Y=t+1
look_back = 1
trainX, trainY = create_dataset(train, look_back)
testX, testY = create_dataset(test, look_back)

# reshape input to be [samples, time steps, features]
trainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))
testX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))

# create and fit the LSTM network
model = Sequential()
model.add(LSTM(4, input_shape=(1, look_back)))
model.add(Dense(1))
model.compile(loss='mean_squared_error', optimizer='adam')
model.fit(trainX, trainY, epochs=100, batch_size=1, verbose=2)
import joblib
joblib.dump(model, 'core_lstm')

# Load the saved model
loaded_model = joblib.load('my_model.joblib')

# Use the loaded model for predictions
predictions = loaded_model.predict(X_test)
